//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.32559
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HLP.Entries.ViewModel.unidadeMedidaService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="unidadeMedidaService.IserviceUnidadeMedida")]
    public interface IserviceUnidadeMedida {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IserviceUnidadeMedida/getUnidade_medida", ReplyAction="http://tempuri.org/IserviceUnidadeMedida/getUnidade_medidaResponse")]
        HLP.Entries.Model.Models.Gerais.Unidade_medidaModel getUnidade_medida(int idUnidadeMedida);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IserviceUnidadeMedida/getUnidade_medida", ReplyAction="http://tempuri.org/IserviceUnidadeMedida/getUnidade_medidaResponse")]
        System.Threading.Tasks.Task<HLP.Entries.Model.Models.Gerais.Unidade_medidaModel> getUnidade_medidaAsync(int idUnidadeMedida);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IserviceUnidadeMedida/saveUnidade_medida", ReplyAction="http://tempuri.org/IserviceUnidadeMedida/saveUnidade_medidaResponse")]
        int saveUnidade_medida(HLP.Entries.Model.Models.Gerais.Unidade_medidaModel objUnidadeMedida);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IserviceUnidadeMedida/saveUnidade_medida", ReplyAction="http://tempuri.org/IserviceUnidadeMedida/saveUnidade_medidaResponse")]
        System.Threading.Tasks.Task<int> saveUnidade_medidaAsync(HLP.Entries.Model.Models.Gerais.Unidade_medidaModel objUnidadeMedida);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IserviceUnidadeMedida/deleteUnidade_medida", ReplyAction="http://tempuri.org/IserviceUnidadeMedida/deleteUnidade_medidaResponse")]
        bool deleteUnidade_medida(int idUnidadeMedida);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IserviceUnidadeMedida/deleteUnidade_medida", ReplyAction="http://tempuri.org/IserviceUnidadeMedida/deleteUnidade_medidaResponse")]
        System.Threading.Tasks.Task<bool> deleteUnidade_medidaAsync(int idUnidadeMedida);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IserviceUnidadeMedida/copyUnidade_medida", ReplyAction="http://tempuri.org/IserviceUnidadeMedida/copyUnidade_medidaResponse")]
        int copyUnidade_medida(int idUnidadeMedida);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IserviceUnidadeMedida/copyUnidade_medida", ReplyAction="http://tempuri.org/IserviceUnidadeMedida/copyUnidade_medidaResponse")]
        System.Threading.Tasks.Task<int> copyUnidade_medidaAsync(int idUnidadeMedida);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IserviceUnidadeMedidaChannel : HLP.Entries.ViewModel.unidadeMedidaService.IserviceUnidadeMedida, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IserviceUnidadeMedidaClient : System.ServiceModel.ClientBase<HLP.Entries.ViewModel.unidadeMedidaService.IserviceUnidadeMedida>, HLP.Entries.ViewModel.unidadeMedidaService.IserviceUnidadeMedida {
        
        public IserviceUnidadeMedidaClient() {
        }
        
        public IserviceUnidadeMedidaClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public IserviceUnidadeMedidaClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IserviceUnidadeMedidaClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IserviceUnidadeMedidaClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public HLP.Entries.Model.Models.Gerais.Unidade_medidaModel getUnidade_medida(int idUnidadeMedida) {
            return base.Channel.getUnidade_medida(idUnidadeMedida);
        }
        
        public System.Threading.Tasks.Task<HLP.Entries.Model.Models.Gerais.Unidade_medidaModel> getUnidade_medidaAsync(int idUnidadeMedida) {
            return base.Channel.getUnidade_medidaAsync(idUnidadeMedida);
        }
        
        public int saveUnidade_medida(HLP.Entries.Model.Models.Gerais.Unidade_medidaModel objUnidadeMedida) {
            return base.Channel.saveUnidade_medida(objUnidadeMedida);
        }
        
        public System.Threading.Tasks.Task<int> saveUnidade_medidaAsync(HLP.Entries.Model.Models.Gerais.Unidade_medidaModel objUnidadeMedida) {
            return base.Channel.saveUnidade_medidaAsync(objUnidadeMedida);
        }
        
        public bool deleteUnidade_medida(int idUnidadeMedida) {
            return base.Channel.deleteUnidade_medida(idUnidadeMedida);
        }
        
        public System.Threading.Tasks.Task<bool> deleteUnidade_medidaAsync(int idUnidadeMedida) {
            return base.Channel.deleteUnidade_medidaAsync(idUnidadeMedida);
        }
        
        public int copyUnidade_medida(int idUnidadeMedida) {
            return base.Channel.copyUnidade_medida(idUnidadeMedida);
        }
        
        public System.Threading.Tasks.Task<int> copyUnidade_medidaAsync(int idUnidadeMedida) {
            return base.Channel.copyUnidade_medidaAsync(idUnidadeMedida);
        }
    }
}
