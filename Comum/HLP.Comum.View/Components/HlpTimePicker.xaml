<runtime:BaseControl
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:wpfTool="clr-namespace:Xceed.Wpf.Toolkit;assembly=Xceed.Wpf.Toolkit" 
             xmlns:runtime="clr-namespace:HLP.Comum.View.Components"
             xmlns:local="clr-namespace:HLP.Comum.View.Components"
             xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit" x:Class="HLP.Comum.View.Components.HlpTimePicker"
             mc:Ignorable="d"
             Width="Auto" Height="Auto" x:Name="componente">
    <runtime:BaseControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/HLP.Comum.Resources;component/Styles/mainStyle.xaml"/>
            </ResourceDictionary.MergedDictionaries>
            <Style TargetType="{x:Type local:HlpTimePicker}">
                <Style.Triggers>
                    <Trigger Property="Validation.HasError" Value="True">
                        <Setter Property="Validation.ErrorTemplate">
                            <Setter.Value>
                                <ControlTemplate>
                                    <DockPanel LastChildFill="True">
                                        <Border Background="#FFECA933" DockPanel.Dock="Right" Margin="5,0,0,0" Width="12" Height="12" CornerRadius="7"
                            ToolTip="{Binding ElementName=customAdorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}">
                                            <TextBlock Text="!" VerticalAlignment="center" HorizontalAlignment="center" FontWeight="Bold" Foreground="white"
                                ></TextBlock>
                                        </Border>
                                        <AdornedElementPlaceholder Name="customAdorner" VerticalAlignment="Center">
                                            <Border BorderBrush="Transparent" BorderThickness="1"></Border>
                                        </AdornedElementPlaceholder>
                                    </DockPanel>
                                </ControlTemplate>

                            </Setter.Value>
                        </Setter>
                    </Trigger>
                    <Trigger Property="IsVisible" Value="false">
                        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="TimePickerStyle" TargetType="{x:Type wpfTool:TimePicker}">
                <Setter Property="WatermarkTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <ContentControl Content="{Binding}" Foreground="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Focusable="False" Margin="0,0,3,0"/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="IsTabStop" Value="False"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type wpfTool:TimePicker}">
                            <Border>
                                <Grid>
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <wpfTool:DateTimeUpDown x:Name="PART_TimeUpDown" AllowSpin="{TemplateBinding AllowSpin}" BorderThickness="1,1,0,1" Background="{TemplateBinding Background}" ContextMenu="{TemplateBinding ContextMenu}" Foreground="{TemplateBinding Foreground}" FormatString="{TemplateBinding FormatString}" ShowButtonSpinner="{TemplateBinding ShowButtonSpinner}" TextAlignment="{TemplateBinding TextAlignment}" Text="" TabIndex="{TemplateBinding TabIndex}" Value="{Binding Value, RelativeSource={RelativeSource TemplatedParent}}" WatermarkTemplate="{TemplateBinding WatermarkTemplate}" Watermark="{TemplateBinding Watermark}">
                                            <wpfTool:DateTimeUpDown.Format>
                                                <TemplateBinding Property="Format">
                                                    <TemplateBinding.Converter>
                                                        <xctk:TimeFormatToDateTimeFormatConverter/>
                                                    </TemplateBinding.Converter>
                                                </TemplateBinding>
                                            </wpfTool:DateTimeUpDown.Format>
                                        </wpfTool:DateTimeUpDown>
                                        <ToggleButton x:Name="_timePickerToggleButton" Grid.Column="1" Focusable="False" IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}}">
                                            <ToggleButton.IsHitTestVisible>
                                                <Binding Path="IsOpen" RelativeSource="{RelativeSource TemplatedParent}">
                                                    <Binding.Converter>
                                                        <xctk:InverseBoolConverter/>
                                                    </Binding.Converter>
                                                </Binding>
                                            </ToggleButton.IsHitTestVisible>
                                            <ToggleButton.Style>
                                                <Style TargetType="{x:Type ToggleButton}">
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                                <Grid SnapsToDevicePixels="True">
                                                                    <xctk:ButtonChrome x:Name="ToggleButtonChrome" CornerRadius="0" RenderMouseOver="{TemplateBinding IsMouseOver}" RenderPressed="{TemplateBinding IsPressed}" RenderChecked="{Binding IsOpen, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type wpfTool:TimePicker}}}" RenderEnabled="{Binding IsEnabled, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type wpfTool:TimePicker}}}">
                                                                        <Grid>
                                                                            <Grid.ColumnDefinitions>
                                                                                <ColumnDefinition Width="*"/>
                                                                                <ColumnDefinition Width="Auto"/>
                                                                            </Grid.ColumnDefinitions>
                                                                            <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Stretch" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Stretch"/>
                                                                            <Grid x:Name="arrowGlyph" Grid.Column="1" IsHitTestVisible="False" Margin="5">
                                                                                <Path x:Name="Arrow" Data="M0,1C0,1 0,0 0,0 0,0 3,0 3,0 3,0 3,1 3,1 3,1 4,1 4,1 4,1 4,0 4,0 4,0 7,0 7,0 7,0 7,1 7,1 7,1 6,1 6,1 6,1 6,2 6,2 6,2 5,2 5,2 5,2 5,3 5,3 5,3 4,3 4,3 4,3 4,4 4,4 4,4 3,4 3,4 3,4 3,3 3,3 3,3 2,3 2,3 2,3 2,2 2,2 2,2 1,2 1,2 1,2 1,1 1,1 1,1 0,1 0,1z" Fill="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" Height="4" Width="7"/>
                                                                            </Grid>
                                                                        </Grid>
                                                                    </xctk:ButtonChrome>
                                                                </Grid>
                                                                <ControlTemplate.Triggers>
                                                                    <Trigger Property="IsEnabled" Value="False">
                                                                        <Setter Property="Fill" TargetName="Arrow" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                                                    </Trigger>
                                                                </ControlTemplate.Triggers>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                </Style>
                                            </ToggleButton.Style>
                                        </ToggleButton>
                                    </Grid>
                                    <Popup x:Name="PART_Popup" IsOpen="{Binding IsChecked, ElementName=_timePickerToggleButton}" StaysOpen="False">
                                        <Border BorderBrush="#FFABADB3" BorderThickness="1">
                                            <Border.Background>
                                                <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                    <GradientStop Color="#FFF0F0F0" Offset="0"/>
                                                    <GradientStop Color="#FFE5E5E5" Offset="1"/>
                                                </LinearGradientBrush>
                                            </Border.Background>
                                            <Grid>
                                                <ListBox x:Name="PART_TimeListItems" BorderThickness="0" DisplayMemberPath="Display" Height="130" Width="150">
                                                    <ListBox.ItemContainerStyle>
                                                        <Style TargetType="{x:Type ListBoxItem}">
                                                            <Setter Property="Template">
                                                                <Setter.Value>
                                                                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                                                        <Border x:Name="Border" BorderThickness="1" SnapsToDevicePixels="True">
                                                                            <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Margin="4"/>
                                                                        </Border>
                                                                        <ControlTemplate.Triggers>
                                                                            <MultiTrigger>
                                                                                <MultiTrigger.Conditions>
                                                                                    <Condition Property="IsMouseOver" Value="True"/>
                                                                                    <Condition Property="IsSelected" Value="False"/>
                                                                                </MultiTrigger.Conditions>
                                                                                <Setter Property="Background" TargetName="Border" Value="#FFB8E0F3"/>
                                                                                <Setter Property="BorderBrush" TargetName="Border" Value="#FF26A0DA"/>
                                                                            </MultiTrigger>
                                                                            <MultiTrigger>
                                                                                <MultiTrigger.Conditions>
                                                                                    <Condition Property="IsMouseOver" Value="False"/>
                                                                                    <Condition Property="IsSelected" Value="True"/>
                                                                                </MultiTrigger.Conditions>
                                                                                <Setter Property="Background" TargetName="Border" Value="#FFC4E5F6"/>
                                                                                <Setter Property="BorderBrush" TargetName="Border" Value="#FF26A0DA"/>
                                                                            </MultiTrigger>
                                                                            <MultiTrigger>
                                                                                <MultiTrigger.Conditions>
                                                                                    <Condition Property="IsMouseOver" Value="True"/>
                                                                                    <Condition Property="IsSelected" Value="True"/>
                                                                                </MultiTrigger.Conditions>
                                                                                <Setter Property="Background" TargetName="Border" Value="#FFD1E8FF"/>
                                                                                <Setter Property="BorderBrush" TargetName="Border" Value="#FF66A7E8"/>
                                                                            </MultiTrigger>
                                                                        </ControlTemplate.Triggers>
                                                                    </ControlTemplate>
                                                                </Setter.Value>
                                                            </Setter>
                                                        </Style>
                                                    </ListBox.ItemContainerStyle>
                                                </ListBox>
                                            </Grid>
                                        </Border>
                                    </Popup>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                </Trigger>
                                <Trigger Property="IsFocused" Value="True">
                                    <Setter Property="FocusManager.FocusedElement" TargetName="PART_TimeUpDown" Value="{Binding ElementName=PART_TimeUpDown}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </ResourceDictionary>
    </runtime:BaseControl.Resources>
    <DockPanel LastChildFill="True">
        <TextBlock x:Name="lblCaption" DockPanel.Dock="Left"
			TextWrapping="Wrap"
			Style="{StaticResource TextBlocktyleComponents}"
			Text="{Binding Caption, RelativeSource={RelativeSource AncestorType={x:Type UserControl}, Mode=FindAncestor}}" 
			Width="{Binding WidthLabel, RelativeSource={RelativeSource AncestorType={x:Type UserControl}, Mode=FindAncestor}}"  Height="{Binding Height, ElementName=componente}" FontFamily="Calibri" FontSize="14"/>
        <wpfTool:TimePicker x:Name="dtCtr" DockPanel.Dock="Left" Height="25" Width="104"
			Value="{Binding Value, RelativeSource={RelativeSource AncestorType={x:Type UserControl}, Mode=FindAncestor}}"
			ShowButtonSpinner="{Binding ShowButtonSpinner, RelativeSource={RelativeSource AncestorType={x:Type UserControl}, Mode=FindAncestor}}"
			IsOpen="{Binding IsOpen, RelativeSource={RelativeSource AncestorType={x:Type UserControl}, Mode=FindAncestor}}"
			StartTime="{Binding StartTime, RelativeSource={RelativeSource AncestorType={x:Type UserControl}, Mode=FindAncestor}}"
			TimeInterval="{Binding TimeInterval, RelativeSource={RelativeSource AncestorType={x:Type UserControl}, Mode=FindAncestor}}"
                            
                            Style="{DynamicResource TimePickerStyle}"
                            
                            />
        <Label Margin="10,0,0,0"/>
    </DockPanel>
</runtime:BaseControl>
